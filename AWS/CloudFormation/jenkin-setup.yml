AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates Jenkins on ECS service (and ELB to
  view externally)
Parameters:
  Project: 
    Type: String
    AllowedPattern : .+
  Env:
    Type: String
    Default: dev
  Service: 
    Type: String
    Default: cicd
  VPCStackName: 
    Type: String
    AllowedPattern : .+
  InfraStackName: 
    Type: String
    AllowedPattern: .+
  DNSDomain: 
    Type: String
  HostedZoneName: 
    Type: String
  LoadBalancerScheme:
    Description: 'Indicates whether the load balancer in front of the ECS cluster is internet-facing or internal.'
    Type: String
    Default: internal
    AllowedValues:
    - internet-facing
    - internal
  JenkinsHttpsCertificateArn: 
    Type: String
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Main Configuration"
        Parameters: 
          - Project
          - Env
          - Service
          - InfraStackName
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VPCStackName
          - LoadBalancerScheme
          - DNSDomain
          - HostedZoneName
          - JenkinsHttpsCertificateArn
Rules:
  checkDNSDomain:
    RuleCondition: 
      Fn::Not:
        - Fn::Equals: 
          - !Ref DNSDomain
          - ''
    Assertions:
      - Assert:
          Fn::Not:
             - Fn::Equals:
               - !Ref HostedZoneName
               - ''
        AssertDescription: 'Check DSNDomain and HostedZoneName'
Conditions:
  HasLoadBalancerSchemeInternal: !Equals [!Ref LoadBalancerScheme, 'internal']
  HasDNSDomain: !Not [!Equals [!Ref DNSDomain, '']]
  HasHostedZoneName: !Not [!Equals [!Ref HostedZoneName, '']]
  HasJenkinsHTTPSCertificate: !Not [!Equals [!Ref JenkinsHttpsCertificateArn, '']]
  #HasSonarHTTPSCertificate: !Not [!Equals [!Ref SonarHttpsCertificateArn, '']]
Resources:
  JenkinsDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Condition: HasDNSDomain
    Properties:
      Comment: DNS name for my jenkins.
      HostedZoneName: !Ref HostedZoneName
      RecordSets:
      - Name: !Join ['', ['jenkins.', !Ref DNSDomain]]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt JenkinsLoadBalancer.CanonicalHostedZoneNameID
          DNSName: !GetAtt JenkinsLoadBalancer.DNSName
  JenkinsLoadBalancer:
    Properties:
      Subnets: !If
      - HasLoadBalancerSchemeInternal
      - !Split [',', {'Fn::ImportValue': !Sub '${VPCStackName}-PrivateSubnets'}]
      - !Split [',', {'Fn::ImportValue': !Sub '${VPCStackName}-PublicSubnets'}]
      Scheme: !Ref LoadBalancerScheme
      SecurityGroups:
        - {'Fn::ImportValue': !Sub '${InfraStackName}-ECSClusterSecurityGroup'}
        - !Ref JenkinsElbSecurityGroup
      Listeners:
        - InstancePort: '8080'
          InstanceProtocol: HTTP
          LoadBalancerPort: !If
          - HasJenkinsHTTPSCertificate
          - 443
          - 80
          Protocol: !If
          - HasJenkinsHTTPSCertificate
          - HTTPS
          - HTTP
          SSLCertificateId: !If
          - HasJenkinsHTTPSCertificate
          - !Ref JenkinsHttpsCertificateArn
          - AWS::NoValue
        - InstancePort: '50000'
          InstanceProtocol: TCP
          LoadBalancerPort: '50000'
          Protocol: TCP
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: 'HTTP:8080/login'
        Timeout: '5'
        UnhealthyThreshold: '5'
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
  JenkinsElbSecurityGroup:
    Properties:
      VpcId: {'Fn::ImportValue': !Sub '${VPCStackName}-VPCID'}
      GroupDescription: Jenkins ELB security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !If
          - HasJenkinsHTTPSCertificate
          - '443'
          - '80'
          ToPort: !If
          - HasJenkinsHTTPSCertificate
          - '443'
          - '80'
          CidrIp: !If
          - HasLoadBalancerSchemeInternal
          - {'Fn::ImportValue': !Sub '${VPCStackName}-VpcCidrBlock'}
          - 0.0.0.0/0 
    Type: 'AWS::EC2::SecurityGroup'
  JenkinsECSService:
    Properties:
      Cluster: {'Fn::ImportValue': !Sub '${InfraStackName}-ClusterName'}
      DesiredCount: 1
      PlacementStrategies:
        - Type: spread
          Field: host
      LoadBalancers:
        - ContainerName: jenkins
          ContainerPort: '8080'
          LoadBalancerName: !Ref JenkinsLoadBalancer
      Role: {'Fn::ImportValue': !Sub '${InfraStackName}-ECSServiceRole'}
      TaskDefinition: !Ref JenkinsTaskDefinition
    Type: 'AWS::ECS::Service'
  JenkinsTaskDefinition:
    Properties:
      ContainerDefinitions:
        - Name: jenkins
          Image: '160699259667.dkr.ecr.eu-west-1.amazonaws.com/cloud-studio/jenkins:1.0.3'
          Hostname: jenkins
          Cpu: 512
          Memory: 1024
          Environment:
            - Name: JAVA_OPTS
              Value: "-Djenkins.install.runSetupWizard=false -Dpermissive-script-security.enabled=true -Dhudson.model.DirectoryBrowserSupport.CSP=\"sandbox allow-same-origin allow-scripts; default-src 'self'; script-src * 'unsafe-eval'; img-src *; style-src * 'unsafe-inline'; font-src *\" -Dpermissive-script-security.enabled=true"
            - Name: JENKINS_PLUGINS
              Value: 'blueocean aws-credentials aws-java-sdk git kubernetes-cd kubernetes-cli pipeline-utility-steps nodejs pipeline-aws workflow-aggregator sonar locale dependency-check-jenkins-plugin performance timestamper htmlpublisher workflow-multibranch dependency-check-jenkins-plugin amazon-ecr docker-plugin parameter-separator scalable-amazon-ecs uno-choice basic-branch-build-strategies permissive-script-security'    
          Essential: true
          MountPoints:
            - ContainerPath: /var/jenkins_home
              SourceVolume: efs-jenkins
            - ContainerPath: /var/run/docker.sock
              SourceVolume: docker-sock
          PortMappings:
            - HostPort: 8080
              ContainerPort: 8080
            - HostPort: 50000
              ContainerPort: 50000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: {'Fn::ImportValue': !Sub '${InfraStackName}-CloudWatchLogsGroup'}
              awslogs-stream-prefix: "jenkins"
              awslogs-region: !Ref AWS::Region
      Volumes:
        - Name: efs-jenkins
          Host:
            SourcePath: /mnt/efs/jenkins_home
        - Name: docker-sock
          Host:
            SourcePath: /var/run/docker.sock
    Type: 'AWS::ECS::TaskDefinition'
Outputs:
  JenkinsURL:
    Description: Jenkins URL
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - JenkinsLoadBalancer
          - DNSName
        - /
    #Value: !If
    #- HasJenkinsHTTPSCertificate
    #- !Join ['', ['https://jenkins.', !Ref DNSDomain]]
    #- !Join ['', ['http', !GetAtt JenkinsLoadBalancer.DNSName, '/']]
  